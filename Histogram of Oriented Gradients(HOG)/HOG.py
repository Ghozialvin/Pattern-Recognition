# -*- coding: utf-8 -*-
"""Tugas3_Pengpol_Ghozi Alvin Karim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E1GrojaKyuMazX9W1uBGFaTa-An1-e2O

# Tugas Pengenalan Pola
---
> Nama : Ghozi Alvin Karim \
> Nim : 121450123 \
> Kelas : Pengenalan Pola (RA)
---

## Histogram of Oriented Gradient
"""

import cv2
import matplotlib.pyplot as plt
from skimage.feature import hog
from skimage import exposure
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score

# Load the image
image_path = '/content/data.jpeg'
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Resize image for better HOG feature extraction
resized_img = cv2.resize(image, (128, 128))

# Calculate HOG features and visualization
hog_features, hog_image = hog(resized_img, orientations=9, pixels_per_cell=(8, 8),
                              cells_per_block=(2, 2), visualize=True, channel_axis=-1)

# Visualize original image and HOG image
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

ax1.axis('off')
ax1.imshow(resized_img)
ax1.set_title('Original Image')

# Rescale HOG image for better visibility
hog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))

ax2.axis('off')
ax2.imshow(hog_image_rescaled, cmap='gray')
ax2.set_title('HOG Visualization')

plt.show()

# For simplicity, let's generate some synthetic data for classification
# In real case, you would use a dataset with labeled images of horses and humans

# Assume we have 2 classes: 0 for "horse" and 1 for "human"
# Generate random features for training (this part should be replaced by real HOG features)
X = np.random.rand(100, len(hog_features))  # 100 samples of HOG feature vectors
y = np.random.randint(2, size=100)  # 0 or 1 labels (horses or humans)

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train a linear SVM on the HOG features
svm = LinearSVC()
svm.fit(X_train, y_train)

# Predict on the test set
y_pred = svm.predict(X_test)

# Display the results
print("Classification report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

import cv2
import matplotlib.pyplot as plt
from skimage.feature import hog
from skimage import exposure
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns

# Dataset gambar
image_path = '/content/1.jpg'
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Mengubah ukuran gambar untuk ekstraksi fitur HOG yang lebih baik
resized_img = cv2.resize(image, (128, 128))

# Menghitung fitur HOG dan visualisasi
hog_features, hog_image = hog(resized_img, orientations=9, pixels_per_cell=(8, 8),
                              cells_per_block=(2, 2), visualize=True, channel_axis=-1)

# Visualisasi gambar asli dan gambar HOG
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

ax1.axis('off')
ax1.imshow(resized_img)
ax1.set_title('Gambar Asli')

# Rescale gambar HOG untuk visibilitas yang lebih baik
hog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))

ax2.axis('off')
ax2.imshow(hog_image_rescaled, cmap='gray')
ax2.set_title('Visualisasi HOG')

plt.show()

# Untuk klasifikasi akan menggunakan dataset dengan gambar kuda dan manusia yang diberi label
# Misalkan kita memiliki 2 kelas: 0 untuk "kuda" dan 1 untuk "manusia"
# Menghasilkan fitur acak untuk pelatihan
X = np.random.rand(100, len(hog_features))  # 100 sampel vektor fitur HOG
y = np.random.randint(2, size=100)  # Label 0 atau 1 (kuda atau manusia)

# Membagi dataset menjadi data test dan train
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Melatih SVM linear pada fitur HOG
svm = LinearSVC()
svm.fit(X_train, y_train)

# Memprediksi data testing
y_pred = svm.predict(X_test)

# Menampilkan hasil klasifikasi
print("Laporan klasifikasi:\n", classification_report(y_test, y_pred))
print("Akurasi:", accuracy_score(y_test, y_pred))

# Menghitung dan menampilkan Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Kuda', 'Manusia'], yticklabels=['Kuda', 'Manusia'])
plt.ylabel('Label Aktual')
plt.xlabel('Label Prediksi')
plt.title('Confusion Matrix')
plt.show()