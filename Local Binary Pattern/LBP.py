# -*- coding: utf-8 -*-
"""Tugas Pengenalan Pola 4_121450123_Ghozi Alvin Karim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x6TUEV_IUnZjQGJy5Z-ANxhwZtgPqkdl

## Soal 1
> Lakukan perhitungan manual dan code untuk normalisasi matrix di atas, lalu tampilkan visualisasi histogram sebelum normalisasi dan sesudah normalisasi

\begin{bmatrix} 100	& 100	& 100 &	100 &	100	& 100 \\
                100	& 150	& 150 &	150	& 150 &	100 \\
                100	& 150	& 255	& 255	& 150	& 100 \\
                100	& 150	& 255	& 255	& 150	& 100 \\
                100 & 150	& 150 & 150	& 150	& 100 \\
                100 & 100	& 100	& 100	& 100	& 100 \\
 \end{bmatrix}
"""

import numpy as np
import matplotlib.pyplot as plt

# Data Gambar 6 x 6
matrix = np.array([
    [100, 100, 100, 100, 100, 100],
    [100, 150, 150, 150, 150, 100],
    [100, 150, 255, 255, 150, 100],
    [100, 150, 255, 255, 150, 100],
    [100, 150, 150, 150, 150, 100],
    [100, 100, 100, 100, 100, 100]
])

# Perhitungan Normalisasi matriks
min_val = matrix.min()
max_val = matrix.max()
normalized_matrix = (matrix - min_val) / (max_val - min_val)

# Plot histogram sebelum dan sesudah normalisasi
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

# Histogram sebelum normalisasi
axs[0].hist(matrix.flatten(), bins=10, color='blue', alpha=0.7)
axs[0].set_title('Histogram Sebelum Normalisasi')
axs[0].set_xlabel('Nilai')
axs[0].set_ylabel('Frekuensi')

# Histogram setelah normalisasi
axs[1].hist(normalized_matrix.flatten(), bins=10, color='green', alpha=0.7)
axs[1].set_title('Histogram Setelah Normalisasi')
axs[1].set_xlabel('Nilai Normalisasi')
axs[1].set_ylabel('Frekuensi')

# Tampilkan plot dengan Histogram
plt.tight_layout()
plt.show()

# Return matriks yang sudah dinormalisasi
print("\n")
print("="*40)
print("> Hasil Data Sebelum Di Normalisasi : \n",matrix)
print("\n")
print("> Hasil Data Setelah Di Normalisasi : \n",normalized_matrix)
print("="*40)

"""## Soal 2.
> Buat pemrograman tentang local binary pattern,kemudian buat 3 perbandingan
1. Deteksi Tepi
2. HOG
3. LBP \
Dengan 1 gambar yang sama !
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.feature import local_binary_pattern
from skimage.feature import hog
from skimage import exposure

# Membaca gambar
img = cv2.imread('/content/drive/MyDrive/Data Pengpol/data.jpeg', cv2.IMREAD_GRAYSCALE) # Membaca gambar dalam format grayscale (hitam putih)

# 1. Deteksi Tepi (Canny Edge Detection)
edges = cv2.Canny(img, 100, 200)
# Melakukan deteksi tepi pada gambar menggunakan metode Canny Edge Detection
# Nilai threshold 100 dan 200 digunakan untuk menentukan sensitivitas deteksi tepi

# 2. Histogram of Oriented Gradients (HOG)
fd, hog_image = hog(img, orientations=8, pixels_per_cell=(16, 16),
                    cells_per_block=(1, 1), visualize=True, channel_axis=None)
# Menghitung Histogram of Oriented Gradients (HOG) untuk ekstraksi fitur dari gambar
# Parameter 'orientations=8' mengatur jumlah orientasi sudut
# 'pixels_per_cell=(16, 16)' menetapkan ukuran sel per piksel
# 'cells_per_block=(1, 1)' menetapkan ukuran blok untuk HOG
# 'visualize=True' digunakan untuk mendapatkan gambar HOG yang divisualisasikan

hog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))
# Menyelaraskan intensitas pada gambar HOG sehingga lebih mudah dilihat

# 3. Local Binary Pattern (LBP)
radius = 1
n_points = 8 * radius
lbp = local_binary_pattern(img, n_points, radius, method="uniform")
# Menghitung Local Binary Pattern (LBP) untuk ekstraksi tekstur
# 'radius=1' adalah radius lingkaran untuk setiap titik
# 'n_points=8*radius' menetapkan jumlah titik sampling dalam lingkaran
# 'method="uniform"' menetapkan metode LBP sebagai 'uniform'

# Tampilkan gambar asli dan hasil deteksi
plt.figure(figsize=(12, 8))

# Gambar asli
plt.subplot(2, 2, 1)
plt.imshow(img, cmap='gray')
plt.title('Gambar Asli')

# Deteksi Tepi
plt.subplot(2, 2, 2)
plt.imshow(edges, cmap='gray')
plt.title('Deteksi Tepi (Canny)')

# HOG
plt.subplot(2, 2, 3)
plt.imshow(hog_image_rescaled, cmap='gray')
plt.title('Histogram of Oriented Gradients (HOG)')

# LBP
plt.subplot(2, 2, 4)
plt.imshow(lbp, cmap='gray')
plt.title('Local Binary Pattern (LBP)')

plt.tight_layout()# Mengatur layout agar tidak terjadi overlap antar gambar
plt.show()